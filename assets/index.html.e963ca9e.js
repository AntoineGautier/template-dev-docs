import{_ as i,r as t,o as r,a as c,b as e,d as n,w as p,F as d,c as a,e as s}from"./app.7912fe21.js";const h={},u=a('<h1 id="guide" tabindex="-1"><a class="header-anchor" href="#guide" aria-hidden="true">#</a> Guide</h1><p>\u26A0\uFE0F Work in progress...</p><h2 id="interface-class" tabindex="-1"><a class="header-anchor" href="#interface-class" aria-hidden="true">#</a> Interface class</h2><h3 id="what-shall-be-declared" tabindex="-1"><a class="header-anchor" href="#what-shall-be-declared" aria-hidden="true">#</a> What shall be declared?</h3><h6 id="all-outside-connectors-needed-by-any-derived-class" tabindex="-1"><a class="header-anchor" href="#all-outside-connectors-needed-by-any-derived-class" aria-hidden="true">#</a> All outside connectors needed by any derived class</h6><div class="custom-container danger"><p class="custom-container-title">Important</p><p>All outside connectors must be declared within the interface class\u2014with the suitable conditional instance statements.</p><p>(Each class extending an interface class shall not declare any outside connector\u2014it may only conditionally remove inherited connectors.)</p></div>',6),m=s("This ensures the "),D={href:"https://specification.modelica.org/maint/3.5/interface-or-type-relationships.html#plug-compatibility-or-restricted-subtyping",target:"_blank",rel:"noopener noreferrer"},y=s("plug-compatibility"),g=s(" of any derived class, and allows"),f=e("ul",null,[e("li",null,"at the template level: defining all possible connections inside a template class, whatever the redeclarations performed on its components,"),e("li",null,"at the simulation model level: having a fixed connectivity structure for each instantiated subsystem model, which allows to connect those instances together without any concern about the actual configuration of each subsystem.")],-1),_={class:"custom-container details"},b=s("How does it comply with the "),C={href:"https://specification.modelica.org/maint/3.5/scoping-name-lookup-and-flattening.html#generation-of-the-flat-equation-system",target:"_blank",rel:"noopener noreferrer"},w=s("Modelica Language Specification"),A=s("?"),v=a(`<ul><li><p>Type compatibility</p><blockquote><p>Each reference is checked, whether it is a valid reference, e.g. the referenced object belongs to or is an instance, where all <em>existing conditional declaration expressions evaluate to true</em> or it is a constant in a package.</p></blockquote><p>So checking that the redeclared component is a subtype of the constraining class is done with all the conditional connectors considered present (even if the redeclared component removes them).</p></li></ul><p><em>How does it differ from interface classes in MBL?</em></p><p>Interface classes are usually implemented with the minimum set of connectors (and other variables) and derived classes extend that set (which ensures type compatibility).<br> See for instance <code>Buildings.Fluid.Boilers.BaseClasses.PartialBoiler</code>:</p><div class="language-mo ext-mo"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Buildings.Fluid.Boilers.BaseClasses.PartialBoiler</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">extends</span><span style="color:#569CD6;"> Interfaces.TwoPortHeatMassExchanger</span><span style="color:#D4D4D4;">(...); </span><span style="color:#6A9955;">// Interface class used by the model</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">Modelica.Blocks.Interfaces.RealInput</span><span style="color:#D4D4D4;"> y(...)       </span><span style="color:#6A9955;">// Additional connector not declared in the interface class</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;Part load ratio&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">Modelica.Blocks.Interfaces.RealOutput</span><span style="color:#D4D4D4;"> T(...)      </span><span style="color:#6A9955;">// Additional connector not declared in the interface class</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;Temperature of the fluid&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a</span><span style="color:#D4D4D4;"> heatPort  </span><span style="color:#6A9955;">// Additional connector not declared in the interface class</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;Heat port, can be used to connect to ambient&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre></div>`,4),E=a(`<h6 id="configuration-parameters-and-system-tags" tabindex="-1"><a class="header-anchor" href="#configuration-parameters-and-system-tags" aria-hidden="true">#</a> Configuration parameters and system tags</h6><p>To be updated.</p><h6 id="both-the-parameter-record-and-locally-accessible-design-parameters" tabindex="-1"><a class="header-anchor" href="#both-the-parameter-record-and-locally-accessible-design-parameters" aria-hidden="true">#</a> Both the <a href="#master-record">parameter record</a> <em>and</em> locally accessible design parameters</h6><p>The parameter record is for propagation across the instance tree.</p><p>The local design parameter declarations ensure that we have a standard set of parameters available in each template or component, whatever the configuration. For instance an evaporator coil still has <code>mChiWat_flow_nominal</code> defined with a final assignment to <code>0</code>.<br> Most of the local design parameters will have final assignments to the parameters from the record.</p><details class="custom-container details"><summary>Example</summary><div class="language-mo ext-mo"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Interface class Buildings.Templates.AirHandlersFans.Interfaces.PartialAirHandler</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">parameter Modelica.Units.SI.MassFlowRate</span><span style="color:#D4D4D4;"> mAirSup_flow_nominal=</span></span>
<span class="line"><span style="color:#D4D4D4;">  dat.mAirSup_flow_nominal</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Supply air mass flow rate&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">annotation (Dialog(group=&quot;Nominal condition&quot;));</span></span>
<span class="line"><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">parameter Modelica.Units.SI.MassFlowRate</span><span style="color:#D4D4D4;"> mAirRet_flow_nominal=</span></span>
<span class="line"><span style="color:#D4D4D4;">  dat.mAirRet_flow_nominal</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Return air mass flow rate&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">annotation (Dialog(group=&quot;Nominal condition&quot;));</span></span>
<span class="line"><span style="color:#569CD6;">parameter Modelica.Units.SI.MassFlowRate</span><span style="color:#D4D4D4;"> mChiWat_flow_nominal</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Total CHW mass flow rate&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">annotation (Dialog(group=&quot;Nominal condition&quot;));</span></span>
<span class="line"><span style="color:#569CD6;">parameter Modelica.Units.SI.MassFlowRate</span><span style="color:#D4D4D4;"> mHeaWat_flow_nominal</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Total HHW mass flow rate&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">annotation (Dialog(group=&quot;Nominal condition&quot;));</span></span>
<span class="line"><span style="color:#569CD6;">parameter Modelica.Units.SI.HeatFlowRate</span><span style="color:#D4D4D4;"> QChiWat_flow_nominal</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Total CHW heat flow rate&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">annotation (Dialog(group=&quot;Nominal condition&quot;));</span></span>
<span class="line"><span style="color:#569CD6;">parameter Modelica.Units.SI.HeatFlowRate</span><span style="color:#D4D4D4;"> QHeaWat_flow_nominal</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Total HHW heat flow rate&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">annotation (Dialog(group=&quot;Nominal condition&quot;));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Derived class Buildings.Templates.AirHandlersFans.VAVMultiZone</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4EC9B0;">extends</span><span style="color:#569CD6;"> Buildings.Templates.AirHandlersFans.Interfaces.PartialAirHandler</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  ...</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> mChiWat_flow_nominal=</span><span style="color:#C586C0;">if</span><span style="color:#569CD6;"> coiCoo.have_sou</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">then</span><span style="color:#569CD6;"> dat.coiCoo.mWat_flow_nominal</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> mHeaWat_flow_nominal=(</span><span style="color:#C586C0;">if</span><span style="color:#569CD6;"> coiHeaPre.have_sou</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">then</span><span style="color:#569CD6;"> dat.coiHeaPre.mWat_flow_nominal</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) +</span></span>
<span class="line"><span style="color:#D4D4D4;">    (</span><span style="color:#C586C0;">if</span><span style="color:#569CD6;"> coiHeaReh.have_sou</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">then</span><span style="color:#569CD6;"> dat.coiHeaReh.mWat_flow_nominal</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">),</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> QChiWat_flow_nominal=</span><span style="color:#C586C0;">if</span><span style="color:#569CD6;"> coiCoo.have_sou</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">then</span><span style="color:#569CD6;"> dat.coiCoo.Q_flow_nominal</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">final</span><span style="color:#D4D4D4;"> QHeaWat_flow_nominal=(</span><span style="color:#C586C0;">if</span><span style="color:#569CD6;"> coiHeaPre.have_sou</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">then</span><span style="color:#569CD6;"> dat.coiHeaPre.Q_flow_nominal</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) +</span></span>
<span class="line"><span style="color:#D4D4D4;">    (</span><span style="color:#C586C0;">if</span><span style="color:#569CD6;"> coiHeaReh.have_sou</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">then</span><span style="color:#569CD6;"> dat.coiHeaReh.Q_flow_nominal</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"></span></code></pre></div></details><h2 id="replaceable-component" tabindex="-1"><a class="header-anchor" href="#replaceable-component" aria-hidden="true">#</a> Replaceable component</h2><p>No <code>choicesAllMatching</code> annotation is currently allowed in the <code>Templates</code> package (to maximize support across various Modelica tools).<br> Expand into an explicit <code>choices</code> annotation with proper description strings and the following rules.</p><ul><li>Use <code>redeclare replaceable</code> to allow <ul><li>further redeclaration by the user,</li><li>visiting the parameter dialog box of the redeclared component (this is Dymola&#39;s behavior, although if the redeclared component contains replaceable components that behavior is enabled automatically).</li></ul></li></ul><h2 id="section" tabindex="-1"><a class="header-anchor" href="#section" aria-hidden="true">#</a> Section</h2><p>A so-called section is needed anytime there is a hard constraint on the allowable choices for two replaceable components that are at the same level of composition.</p><details class="custom-container details"><summary>Example</summary><p>In the case of a multiple-zone VAV with an air economizer, a return fan should require a modulating relief damper. However, we cannot bind the redeclaration of the damper component to the redeclaration of the return fan component. So we introduce a section <code>Templates.AirHandlersFans.Components.ReliefReturnSection</code> that contains the two components, so that the whole section component can be redeclared with the proper inside fan and damper components.</p></details><p>The interface class for a section should use the same class for the control bus as the one used by the system template.<br> This differs from the basic components which have a dedicated class for the control bus <code>Buildings.Templates.Components.Interfaces.Bus</code>.<br> The motivation is to avoid nesting expandable connectors and to enable traversing seamlessly the composition levels when connecting signal variables.</p><div class="language-mo ext-mo"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#6A9955;">// Buildings.Templates.AirHandlersFans.VAVMultiZone</span></span>
<span class="line"><span style="color:#DCDCAA;">connect</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">secOutRel.bus</span><span style="color:#D4D4D4;">, bus);            </span><span style="color:#6A9955;">// secOutRel is a section</span></span>
<span class="line"><span style="color:#DCDCAA;">connect</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">ctl.bus</span><span style="color:#D4D4D4;">, bus);                  </span><span style="color:#6A9955;">// ctl is a controller</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Buildings.Templates.AirHandlersFans.Components.OutdoorReliefReturnSection</span></span>
<span class="line"><span style="color:#DCDCAA;">connect</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">damRet.bus</span><span style="color:#D4D4D4;">, bus.damRet);        </span><span style="color:#6A9955;">// connection to the damper bus inside the section</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Buildings.Templates.AirHandlersFans.Components.Controls.G36VAVMultiZone</span></span>
<span class="line"><span style="color:#DCDCAA;">connect</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">ctl.yRetDamPos</span><span style="color:#D4D4D4;">, bus.damRet.y);  </span><span style="color:#6A9955;">// accessing the damper control variable inside the controller</span></span>
<span class="line"></span></code></pre></div><h2 id="control-section" tabindex="-1"><a class="header-anchor" href="#control-section" aria-hidden="true">#</a> Control section</h2>`,15),B=s("We instantiate all control blocks that form the control sequence of a system into one single class that is similar to a "),x=e("a",{href:"#section"},"section",-1),T=s(", see for instance "),V={href:"https://github.com/lbl-srg/modelica-buildings/blob/8b0d03018b18928fc9a08367e4d330e3eb711941/Buildings/Templates/AirHandlersFans/Components/Controls/G36VAVMultiZone.mo",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"Buildings.Templates.AirHandlersFans.Components.Controls.G36VAVMultiZone",-1),k=s("."),R=e("p",null,"Particularly this control section uses the same class for the control bus as the one used by the system template.",-1),H=e("h2",{id:"control-point-connections",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#control-point-connections","aria-hidden":"true"},"#"),s(" Control point connections")],-1),I=e("p",null,"To be updated.",-1),M=e("h2",{id:"master-record",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#master-record","aria-hidden":"true"},"#"),s(" Master record")],-1),F=e("p",null,"The master record of a template class is the Modelica data structure that is used to",-1),S=e("li",null,"assign design and operating parameter values for all subcomponents,",-1),P=e("li",null,"support parameter propagation from a top-level, whole HVAC system parameter record,",-1),G=s("populate the "),U={href:"https://docs.google.com/document/d/16Z8HqTi3vNV3HUaa4ijBPVSQvA4MyGTu8bxoGTBD2YI/edit?usp=sharing",target:"_blank",rel:"noopener noreferrer"},W=s("equipment schedule in Linkage UI"),Z=s("."),N=a('<h3 id="implementation-rules" tabindex="-1"><a class="header-anchor" href="#implementation-rules" aria-hidden="true">#</a> Implementation rules</h3><h6 id="use-only-one-nesting-level" tabindex="-1"><a class="header-anchor" href="#use-only-one-nesting-level" aria-hidden="true">#</a> Use only one nesting level</h6><p>If needed, component records must extend (not instantiate) subcomponent records.<br> For instance in <code>Buildings.Templates.Components.Coils.Interfaces.Data</code>:</p><ul><li>The class cannot extend <code>Buildings.Templates.Components.Valves.Interfaces.Data</code> because of the colliding declarations of <code>typ</code>.</li><li>So <code>dpValve_nominal</code> is declared locally and a protected record with the type <code>Buildings.Templates.Components.Valves.Interfaces.Data</code> is constructed to pass in parameters to the valve component.</li></ul><h6 id="configuration-parameters-must-be-set-through-the-component-model-not-through-the-record" tabindex="-1"><a class="header-anchor" href="#configuration-parameters-must-be-set-through-the-component-model-not-through-the-record" aria-hidden="true">#</a> Configuration parameters must be set through the component model, not through the record</h6><ul><li>Structural parameters are assigned <em><strong>from</strong></em> the component model <em><strong>to</strong></em> the record, and propagated <em><strong>up</strong></em> the instance tree.</li><li>Design and operating parameters are assigned <em><strong>from</strong></em> the record <em><strong>to</strong></em> the component model, and propagated <em><strong>down</strong></em> the instance tree.</li></ul><p>The record for the <a href="#control-section">controller section</a> needs to be instantiated (not extended) in the master record because it requires many structural parameters (such as <code>typFanSup</code>) that have duplicates in the master record.</p><p>At the component level, we instantiate the component record and bind (<code>final</code>) local parameters to the record elements, as in <code>Buildings.Fluid.Chillers.ElectricEIR</code> (as opposed to extending the record to integrate the parameter definitions as <code>Buildings.Fluid.Actuators.BaseClasses.ValveParameters</code>).<br> This allows simpler propagation (only the record is passed in) which is agnostic from the parameter structure of the constraining class (for instance <code>mWat_flow_nominal</code> is not defined in <code>Buildings.Templates.Components.Coils.Interfaces.PartialCoil</code>).</p><h6 id="do-not-use-final-bindings-for-configuration-parameters" tabindex="-1"><a class="header-anchor" href="#do-not-use-final-bindings-for-configuration-parameters" aria-hidden="true">#</a> Do not use final bindings for configuration parameters</h6><p>Use <code>annotation(Dialog(enable=false))</code> instead.</p><p>This is a temporary workaround for what seems to be a bug in Dymola (SRF00860858) and to allow propagating from a top-level (whole building) record as in <code>Buildings.Templates.AirHandlersFans.Validation.VAVMZNoEconomizer</code>.</p>',11),X={class:"custom-container details"},L=e("summary",null,"About outer references",-1),O=s("Top-level model with outer references should be supported but the valid "),j=e("code",null,"outer replaceable",-1),z=s(" component declaration clause differs between OCT and Dymola, see "),Q={href:"https://github.com/AntoineGautier/modelica-buildings/blob/issue1374_templates_record_outer/Buildings/Templates/AirHandlersFans/Validation/UserProject/DataTopLevelDymola.mo",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"issue1374_templates_record_outer",-1),J=s("."),Y=s("At the AHU template level, switching to outer references (and using a model instead of a record\u2014as "),$={href:"https://specification.modelica.org/maint/3.5/class-predefined-types-and-declarations.html#specialized-classes",target:"_blank",rel:"noopener noreferrer"},ee=s("elements of a record shall not have "),se=e("code",null,"inner",-1),ne=s(" nor "),oe=e("code",null,"outer",-1),ae=s(" prefixes"),te=s(") would avoid painful propagation of configuration parameters "),le=e("code",null,"typ*",-1),ie=s(". However, this will not support propagation from a top level (whole building) record then."),re=e("h3",{id:"exposed-parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exposed-parameters","aria-hidden":"true"},"#"),s(" Exposed parameters")],-1),ce=e("p",null,"To be updated.",-1),pe=e("h2",{id:"icons-for-system-schematics",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#icons-for-system-schematics","aria-hidden":"true"},"#"),s(" Icons for system schematics")],-1),de=s("Refer to the "),he={href:"https://lbl-srg.github.io/linkage.js/requirements.html#engineering-schematic",target:"_blank",rel:"noopener noreferrer"},ue=s("specification for the generation of engineering schematics"),me=s(" if needed."),De=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"Modelica tool support"),e("p",null,[s("Currently the SVG graphics integrated using class annotations such as "),e("code",null,"Icon(graphics={Bitmap(fileName=<svg-file-path>, visible=<boolean-expression>))"),s(" are not rendered by Modelon Impact, and only very incompletely by OMEdit, most likely due to "),e("code",null,"<boolean-expression>"),s(" not being evaluated at UI runtime.")]),e("p",null,"Dymola (v2022.x) entirely supports those features.")],-1),ye=s("The master SVG document containing all raw icons provided by Taylor Engineering and used in "),ge=s("Guideline 36"),fe=s(" is currently located at "),_e={href:"https://github.com/lbl-srg/modelica-buildings/blob/issue1374_templates/Buildings/Resources/Images/Templates/Icons.svg",target:"_blank",rel:"noopener noreferrer"},be=e("code",null,"Buildings/Resources/Images/Templates/Icons.svg",-1),Ce=s("."),we=a('<p>Those raw icons must be processed as described below for Inkscape (v1.1) before being used in the icon layers of Modelica classes.</p><ul><li>Select object, copy to new file</li><li>Change line color to black</li><li>Account for 100 px for each grid cell in Dymola icon layer</li><li>For most of the AHU components, lock width/height ratio and change height to 1000 px (lower resolution is blurry in Dymola). For transducers, 1000 px is for the probe, 400 px for the box</li><li>Change stroke width to 10 px and reset height to 1000 px</li><li>For polygons, the different segments will typically not be connected together (gap at each corner), so select each segment with <code>Node</code> tool and use <code>Node</code> functionalities to <ul><li><code>Convert selected objects to path</code></li><li><code>Join selected nodes</code></li><li>For the last corner use <code>Path/Union</code></li></ul></li><li>Text should be in sans-serif with font size of 150 (if needed, select text object and transform to path with <code>Path/Object to Path</code>)</li><li>Select object and <code>Edit/Resize Page to Selection</code></li><li>Save copy as plain SVG</li></ul><h2 id="code-base" tabindex="-1"><a class="header-anchor" href="#code-base" aria-hidden="true">#</a> Code base</h2><h3 id="git-workflow" tabindex="-1"><a class="header-anchor" href="#git-workflow" aria-hidden="true">#</a> Git workflow</h3>',4),Ae=s("The main feature branch for template development is "),ve={href:"https://github.com/lbl-srg/modelica-buildings/tree/issue1374_templates",target:"_blank",rel:"noopener noreferrer"},Ee=e("code",null,"issue1374_templates",-1),Be=s(" that currently depends on\u2014and is periodically kept in sync with"),xe=e("li",null,[s("MBL "),e("code",null,"master")],-1),Te=s("MBL "),Ve={href:"https://github.com/lbl-srg/modelica-buildings/tree/issue1913_g36_final",target:"_blank",rel:"noopener noreferrer"},qe=e("code",null,"issue1913_g36_final",-1),ke=e("p",null,"Each new development should",-1),Re=e("ul",null,[e("li",null,"start by branching out from the main feature branch\u2014so the new branch is a dependent of the main feature branch,"),e("li",null,[s("be kept in sync with MBL master "),e("em",null,[e("strong",null,"by merging the main feature branch")]),s(", as opposed to merging MBL master directly.")])],-1),He=e("h3",{id:"code-tags",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#code-tags","aria-hidden":"true"},"#"),s(" Code tags")],-1),Ie=s("Use the code tags from "),Me={href:"https://peps.python.org/pep-0350/#mnemonics",target:"_blank",rel:"noopener noreferrer"},Fe=s("PEP 350"),Se=s(" to reference issues and feature enhancements directly in the Modelica code base. Specify the GH issue number if available."),Pe=e("br",null,null,-1),Ge=s(" We keep it simple and only use:"),Ue=e("li",null,[e("code",null,"BUG"),s(" for what prevents from translating or simulating a model: "),e("em",null,[e("strong",null,"should prevent merging")])],-1),We=e("code",null,"FIXME",-1),Ze=s(" for any technical debt not suitable for production: "),Ne=e("em",null,[e("strong",null,"should prevent merging")],-1),Xe=s(", include "),Le={href:"https://peps.python.org/pep-0350/#mnemonics",target:"_blank",rel:"noopener noreferrer"},Oe=s("PEP 350"),je=s(),ze=e("code",null,"TODO",-1),Qe=s(" under that code tag"),Ke=e("li",null,[e("code",null,"HACK"),s(" mainly for workarounds related to Modelica tools' limitations: reference the ticket number from the Modelica tool provider if available")],-1),Je=e("li",null,[e("code",null,"RFE"),s(" for a clearly identified development need (as opposed to an idea)")],-1),Ye=a(`<p>So we can collect all code tags with:</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">grep -nER </span><span style="color:#CE9178;">&#39;(^|/(\\*|/)|&lt;!--|&quot;)\\s*(BUG|FIXME|HACK|RFE)&#39;</span><span style="color:#D4D4D4;"> Buildings/Templates/.</span></span>
<span class="line"></span></code></pre></div><p>That returns for instance:</p><div class="language-bash ext-sh"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./Components/Types.mo:102:  // RFE: Add support </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> PICV.</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./Components/Pumps/package.mo:4:  // FIXME: Package and models are still under development.</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Data/VAVBoxController.mo:44:  // FIXME </span><span style="color:#6A9955;">#1913: not in \xA73.1.2.2 VAV Reheat Terminal Unit</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:29:  FIXME: have_hotWatCoi should not have been deleted, see https://github.com/lbl-srg/modelica-buildings/commit/5d1c7d9bbe17c0049a1fc332005705f35e1593dc#r67866444</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:106:  // FIXME </span><span style="color:#6A9955;">#1913: not in \xA73.1.1.2 Outdoor Air Ventilation Set Points</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:110:  // FIXME </span><span style="color:#6A9955;">#1913: not in \xA73.1.2.2 VAV Reheat Terminal Unit.</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:116:  // FIXME </span><span style="color:#6A9955;">#1913: should be inputs such as in Buildings.Controls.OBC.ASHRAE.G36.ThermalZones.Setpoints</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:141:  // BUG </span><span style="color:#6A9955;">#1913: missing default parameter assignment, see non final bindings below.</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:178:  // FIXME </span><span style="color:#6A9955;">#1913: occDen should not be exposed.</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:204:    </span><span style="color:#CE9178;">&quot;FIXME #1913: Optimal start using global outdoor air temperature not associated with any AHU&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:207:    </span><span style="color:#CE9178;">&quot;FIXME #1913: Should be conditional, depending on have_hotWatCoi&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:210:    </span><span style="color:#CE9178;">&quot;FIXME #1913: Validate override logic: should not be used in simulation&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:213:    </span><span style="color:#CE9178;">&quot;FIXME #1913: Validate override logic: should not be used in simulation&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:216:    </span><span style="color:#CE9178;">&quot;FIXME #1913: Should be conditional, depending on have_hotWatCoi&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./ZoneEquipment/Components/Controls/G36VAVBoxReheat.mo:219:    </span><span style="color:#CE9178;">&quot;RFE: Set point adjustment by the occupant is not implemented&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./AirHandlersFans/VAVMultiZone.mo:4:  HACK: In Dymola only (ticket SR00860858-01), bindings </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> the parameter record</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./AirHandlersFans/VAVMultiZone.mo:53:  RFE: Currently only the configuration with economizer is supported.</span></span>
<span class="line"><span style="color:#D4D4D4;">Buildings/Templates/./AirHandlersFans/VAVMultiZone.mo:563:&lt;!-- RFE: This should be integrated </span><span style="color:#C586C0;">in</span><span style="color:#D4D4D4;"> the AHU template ultimately. --&gt;</span></span>
<span class="line"></span></code></pre></div>`,4);function $e(es,ss){const o=t("ExternalLinkIcon"),l=t("RouterLink");return r(),c(d,null,[u,e("p",null,[m,e("a",D,[y,n(o)]),g]),f,e("details",_,[e("p",null,[e("em",null,[b,e("a",C,[w,n(o)]),A])]),v]),E,e("p",null,[B,x,T,e("a",V,[q,n(o)]),k]),R,H,I,M,F,e("ul",null,[S,P,e("li",null,[G,e("a",U,[W,n(o)]),Z])]),N,e("details",X,[L,e("p",null,[O,j,z,e("a",Q,[K,n(o)]),J]),e("p",null,[Y,e("a",$,[ee,se,ne,oe,ae,n(o)]),te,le,ie])]),re,ce,pe,e("p",null,[de,e("a",he,[ue,n(o)]),me]),De,e("p",null,[ye,n(l,{to:"/references.html#g36"},{default:p(()=>[ge]),_:1}),fe,e("a",_e,[be,n(o)]),Ce]),we,e("p",null,[Ae,e("a",ve,[Ee,n(o)]),Be]),e("ul",null,[xe,e("li",null,[Te,e("a",Ve,[qe,n(o)])])]),ke,Re,He,e("p",null,[Ie,e("a",Me,[Fe,n(o)]),Se,Pe,Ge]),e("ul",null,[Ue,e("li",null,[We,Ze,Ne,Xe,e("a",Le,[Oe,n(o)]),je,ze,Qe]),Ke,Je]),Ye],64)}var os=i(h,[["render",$e]]);export{os as default};

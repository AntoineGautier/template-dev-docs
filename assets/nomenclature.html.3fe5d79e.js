import{_ as n,r as a,o as s,a as c,b as o,d as i,w as l,F as p,c as t,e}from"./app.7912fe21.js";var u="/template-dev-docs/img/control.png";const h={},m=t('<h1 id="nomenclature" tabindex="-1"><a class="header-anchor" href="#nomenclature" aria-hidden="true">#</a> Nomenclature</h1><p>This provides conventions mainly for variable naming, marginally for component naming.</p><h2 id="control-points" tabindex="-1"><a class="header-anchor" href="#control-points" aria-hidden="true">#</a> Control points</h2><p>Damper and valve models</p><ul><li>take <ul><li><code>y1</code> (Boolean) if 2-position, XOR</li><li><code>y</code> (real, fractional) if modulating</li></ul></li><li>return <ul><li><code>y_actual</code> (real, fractional) for the position feedback (modulating), XOR</li><li><code>y1_actual</code> (Boolean, open end switch status) and <code>y0_actual</code> (Boolean, closed end switch status)</li></ul></li></ul><p>Fan and pump models</p><ul><li>take <ul><li><code>y1</code> for the on/off command (Boolean, used for constant speed motor starter, and variable speed VFD Run signal), AND</li><li><code>y</code> (optional) for the commanded speed (real fractional or integer, used for variable speed or 2-stage fan motor)</li></ul></li><li>return <code>y1_actual</code> (Boolean, status)</li></ul>',7),f=e("(See also "),_=e("command in Glossary"),y=e(".)"),b=t('<details class="custom-container details"><p><em><strong>Still need to clarify</strong></em> the use of <code>u</code> and <code>y</code> in MBL.</p><ul><li>Is it in reference to the control system (as I/O points) or in reference to the modeled component (either the process\u2014for a sensor\u2014or the controls)?</li><li>Is it at all related to control theory as in the diagram below? Obviously not as we would then use <code>u</code> for the controller <em>output</em> and <code>e = ysp - y</code> so something in the <code>y</code> domain for the controller <em>input</em>.</li></ul><p><img src="'+u+'" alt="control"></p></details><h2 id="order-of-morphemes" tabindex="-1"><a class="header-anchor" href="#order-of-morphemes" aria-hidden="true">#</a> Order of morphemes</h2><p>In the CamelCase instance name:</p><ul><li><p>The first morpheme indicates what the instance represents.</p><ul><li>For instance a controller <code>ctl</code>, a fan <code>fan</code>, a coil <code>coi</code></li></ul><details class="custom-container details"><p>This is motivated by the naming of</p><ul><li><p>quantity variables: we would not use <code>SupAirT</code> for the supply air temperature, but rather <code>TAirSup</code>,</p></li><li><p>physical connectors: see <code>port_a</code>.</p></li></ul></details></li><li><p>The suffixes stand for the attributes by order of importance.</p><ul><li><p>For instance <code>coiCoo</code> for cooling coil, <code>fanSupDra</code> for a supply fan in a draw-through configuration.</p></li><li><p>For a quantity</p><ul><li>the first suffix shall systematically describe the medium (<code>ChiWat</code>, <code>Air</code>, etc.),</li><li>the second suffix shall describe the origin of the medium (<code>ChiWatSup</code>, <code>TAirSup</code>, etc.).</li></ul><p>Exceptions are only allowed if the quantity is a system characteristic for which there is no ambiguity, for instance <code>dpDamOut_nominal</code> for the OA damper pressure drop (we don\u2019t mention air) or <code>dpValCoiCoo</code> for the cooling coil control valve (we don\u2019t mention CHW).</p><p>Similarly (exhaustive list):</p><ul><li><code>TOut</code> (air implied)</li><li><code>TZon</code> (air implied)</li><li><code>pBui_rel</code> (air implied)</li></ul></li></ul></li></ul><p>All CamelCase morphemes should be used before the first underscore\u2014such as in <code>mAirSup_flow_nominal</code>\u2014with the exception of the physical connectors where we use <code>port_aChiWat</code>.</p><h2 id="do-we-allow-3-letter-capital-names-such-as-chw" tabindex="-1"><a class="header-anchor" href="#do-we-allow-3-letter-capital-names-such-as-chw" aria-hidden="true">#</a> Do we allow 3-letter capital names such as CHW?</h2><div class="custom-container danger"><p class="custom-container-title">NO</p><p>3-letter capital abbreviations are only allowed\u2014and encouraged\u2014in documentation and description strings.</p></div><p>For variable and instance names:</p><table><thead><tr><th>Rather use</th><th>Instead of</th></tr></thead><tbody><tr><td>ChiWat</td><td>CHW</td></tr><tr><td>ConWat</td><td>CW</td></tr><tr><td>HeaWat</td><td>HHW</td></tr><tr><td>HotWat</td><td>DHW</td></tr><tr><td>Eco</td><td>WSE</td></tr><tr><td>Hex</td><td>HX</td></tr><tr><td>AirHan</td><td>AHU</td></tr><tr><td>Tow</td><td>CT</td></tr><tr><td>yLoa</td><td>PLR</td></tr></tbody></table><p>Tolerated exceptions:</p><ul><li>COP</li><li>VAV</li></ul><h2 id="fixed-position-or-non-abbreviated-forms" tabindex="-1"><a class="header-anchor" href="#fixed-position-or-non-abbreviated-forms" aria-hidden="true">#</a> Fixed position or non-abbreviated forms</h2><ul><li><p><code>_nominal</code>, <code>_min</code>, <code>_max</code> and <code>_actual</code> always at the end</p><details class="custom-container details"><p><code>min</code> and <code>max</code> are attributes of primitive types in Modelica, same as <code>nominal</code>, and should have the same notation, not Min and Max in CamelCase.</p></details></li><li><p>For design conditions use <code>_nominal</code> not <code>Des</code></p></li><li><p><code>_flow</code> for rate per unit of time</p></li><li><p><code>have_</code>, <code>is_</code> or <code>use_</code> for a structural parameter, always at the beginning</p><details class="custom-container details"><p>Why not <code>has_</code>? Because \u201CDoes it have?\u201D, same for \u201CDoes it use?\u201D, but \u201CIs it?\u201D</p></details></li><li><p><code>_a</code> and <code>_b</code> for inlet and outlet ports.</p></li></ul><h2 id="reserved" tabindex="-1"><a class="header-anchor" href="#reserved" aria-hidden="true">#</a> Reserved</h2><h3 id="physical-quantities" tabindex="-1"><a class="header-anchor" href="#physical-quantities" aria-hidden="true">#</a> Physical quantities</h3><p>Pressure:</p><ul><li><code>p</code> is used for absolute pressure,</li><li><code>p_rel</code> for relative pressure (duct static, building static, etc.),</li><li><code>dp</code> for a pressure drop across an equipment or a circuit.</li></ul><p>Relative humidity: <code>phi</code></p>',18),g=e("From "),v={href:"https://simulationresearch.lbl.gov/modelica/releases/v8.1.0/help/Buildings_UsersGuide.html#Buildings.UsersGuide.Conventions",target:"_blank",rel:"noopener noreferrer"},w=e("Buildings.UsersGuide.Conventions"),x=e(":"),C=t('<ul><li><p>Mass fraction</p><ul><li>Uppercase <code>X</code> denotes mass fraction per total mass.</li><li>Lowercase <code>x</code> denotes mass fraction per mass of dry air (absolute humidity).</li></ul></li><li><p><code>TWetBul</code> for wet bulb</p></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>The naming conventions used for variables representing quantities (such as <code>T</code> for temperature) should be used in component names (typically sensors) for the sake of concision.</p><p>For instance a sensor for supply air temperature should be named <code>TAirSup</code> instead of <code>senTemAirSup</code>.</p></div><h3 id="various" tabindex="-1"><a class="header-anchor" href="#various" aria-hidden="true">#</a> Various</h3><p><code>Set</code> for a set point, always as the last morpheme. So <code>TZonHeaOccSet</code> not <code>TZonHeaSetOcc</code>.</p><p>The letter <code>n</code> is used to represent a number of something (as opposed to num).</p><p>The letter <code>y</code> is used to represent a fractional quantity (speed, opening, load) taking 1 as maximum value, for instance <code>yLoa</code> for PLR.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li><p>Prefer <code>ctl</code> to <code>con</code> for a controller as the latter is too loose: condenser, configuration, etc.</p></li><li><p>Prefer <code>cfg</code> to <code>con</code> for a configuration.</p></li><li><p>Prefer <code>lck</code> to <code>loc</code> for lock-out as the latter is too loose: local, etc.</p></li></ul></div><h2 id="legacy-exceptions" tabindex="-1"><a class="header-anchor" href="#legacy-exceptions" aria-hidden="true">#</a> Legacy exceptions</h2><p>Mainly for consistency with MSL we allow the following variable names.</p><ul><li><code>samplePeriod</code></li></ul>',10);function T(S,W){const d=a("RouterLink"),r=a("ExternalLinkIcon");return s(),c(p,null,[m,o("p",null,[f,i(d,{to:"/more/glossary.html#command"},{default:l(()=>[_]),_:1}),y]),b,o("p",null,[g,o("a",v,[w,i(r)]),x]),C],64)}var k=n(h,[["render",T]]);export{k as default};
